name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - LICENSE
      - README.md
      - 'docs/**'
  pull_request:
    paths-ignore:
      - LICENSE
      - README.md
      - 'docs/**'

env:
  BUILD_TYPE: Release
  PROJECT_NAME: plugify-source2-launcher

jobs:
  setup:
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      github_sha_short: ${{ steps.vars.outputs.github_sha_short }}
    steps:
      - name: Set variables
        id: vars
        run: echo "github_sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Generate Release
        if: ${{ !env.ACT }}
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/release-please-config.json
          manifest-file: .github/release-please-manifest.json

  build:
    needs: setup
    if: ${{ needs.setup.outputs.release_created }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win64
            arch: x64
            container: null
            setup_env: msvc
          - os: ubuntu-latest
            platform: linuxsteamrt64
            arch: x86_64
            container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest
            setup_env: gcc14
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Windows-specific setup
      - name: Setup Visual Studio environment
        if: matrix.setup_env == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Linux-specific setup (in container)
      - name: Install GCC-14
        if: matrix.setup_env == 'gcc14'
        shell: bash -el {0}
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-14-monolithic
          ln -sf /usr/bin/gcc-14 /usr/bin/gcc && ln -sf /usr/bin/g++-14 /usr/bin/g++
        # for ACT add nodejs

      - name: Setup CMake
        if: matrix.setup_env == 'msvc'
        uses: lukka/get-cmake@latest

      - name: Cache build dependencies
        if: matrix.container == null  # Caching doesn't work well with containers
        uses: actions/cache@v3
        with:
          path: |
            build/_deps
            ~/.vcpkg
            ~/.cache
          key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Configure
        shell: bash -el {0}
        run: |
          cmake -S . -B build -G "Ninja" -DS2_VERSION="${{ needs.setup.outputs.tag_name }}"

      - name: Build
        shell: bash -el {0}
        run: |
          cmake --build build --target ${{ env.PROJECT_NAME }} --config ${{ env.BUILD_TYPE }} --parallel

      - name: Prepare artifacts
        shell: bash -el {0}
        run: |
          mkdir -p build/output/bin/${{ matrix.platform }}/
          cp build/external/plugify/*plugify.* build/output/bin/${{ matrix.platform }}/
          cp build/s2launcher* build/output/bin/${{ matrix.platform }}/
          cp build/crashpad_handler build/output/bin/${{ matrix.platform }}/
          cp build/crashpad.jsonc build/output/bin/${{ matrix.platform }}/
          mkdir -p build/output/csgo/addons/plugify/bin/${{ matrix.platform }}/
          cp build/micromamba* build/output/csgo/addons/plugify/bin/${{ matrix.platform }}/
        # cp build/plugify.pconfig build/output/csgo

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-build-${{ matrix.platform }}-${{ needs.setup.outputs.github_sha_short }}
          path: build/output/
          retention-days: 7

  package:
    needs: ["setup", "build"]
    if: ${{ needs.setup.outputs.release_created }}
    strategy:
      matrix:
        platform: [linuxsteamrt64, win64]
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.release.outputs.url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-build-${{ matrix.platform }}-${{ needs.setup.outputs.github_sha_short }}
          path: artifacts/${{ matrix.platform }}

      - name: Compress build artifacts
        run: |
          mkdir -p build/${{ matrix.platform }}
          tar -cjf build/${{ matrix.platform }}/${{ env.PROJECT_NAME }}-build-${{ matrix.platform }}-${{ needs.setup.outputs.github_sha_short }}.tar.bz2 artifacts/${{ matrix.platform }}

      - name: Upload release asset
        if: ${{ !env.ACT }}
        uses: softprops/action-gh-release@v1
        id: release
        with:
          tag_name: ${{ needs.setup.outputs.tag_name }}
          files: |
            build/${{ matrix.platform }}/*.tar.bz2

  notify:
    needs: ["setup", "build", "package"]
    if: ${{ needs.setup.outputs.release_created && always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        if: ${{ success() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: |
            üéâ **New Release: ${{ env.PROJECT_NAME }} ${{ needs.setup.outputs.tag_name }}**
            
            üì¶ **Downloads:** [${{ needs.setup.outputs.tag_name }}](${{ needs.package.outputs.url }})
            
            Install via curl:
            ```bash
            mkdir -p "./Counter-Strike Global Offensive/game" && cd "./Counter-Strike Global Offensive/game"
            curl -LO ${{ needs.package.outputs.url }}
            ```

      - name: Send Failure Notification
        if: ${{ failure() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "‚ö†Ô∏è Release workflow failed for ${{ env.PROJECT_NAME }} ${{ needs.setup.outputs.tag_name }}"
